#!/bin/sh
# unidir
# Unify the content of multiple directories into one using symlinks.

VERSION="1.0.0"

unidir_main() {
	e_args=16
	e_no_realpath=17

	which realpath > /dev/null 2>&1 \
		|| _fatal $e_no_realpath "realpath missing."

	scriptpath="$( realpath "$0" )"  
	scriptname="$( basename "$scriptpath" )"

	OVERRIDE_SYMLINKS=0

	while getopts fhv opt
	do
		case $opt in
			f) OVERRIDE_SYMLINKS=1 ;;
			h) cmd=help ;;
			v) cmd=version ;;
			*) _invalid_opt ;;
		esac
	done

	shift $(( OPTIND - 1 ))

	[ -z "$cmd" ] && cmd="process"

	case "$cmd" in
		help|process|version) "unidir_$cmd" "$@" ;;
		*) _invalid_cmd ;;
	esac

	return $?
}

unidir_process() {
	[ $# -lt 2 ] \
		&& _fatal $e_args \
			"Missing arguments. Must specify source & destination directories. See -h for details."

	for dst; do true; done

	while [ $# -gt 1 ]
	do
		src="$1"
		_merge_into "$src" "$dst"
		shift
	done
}

unidir_help() {
cat <<USAGE
$scriptname $VERSION

Usage: $scriptname [options] src1 [src2 srcn...] dst

Unify the content of multiple directories into one using symlinks.

The first directory will have priority if symlinks are not overridden when present.

Available options:

	-f        Override symlinks if one is present.
	-h        This help screen.

Example:

	src/
		1/a
		2/a
		3/b
	dst/

	% $scriptname src/* dst

	# If -f is not set:

	dst/
		1/a -> ../src/1/a
		3/b -> ../src/3/b

	# If -f is set:

	dst/
		2/a -> ../src/2/a
		3/b -> ../src/3/b

USAGE
}

unidir_version() {
	_echo "$scriptname $VERSION"
}

_echo() {
	echo "$@"
}

_error() {
	_echo "$@" >&2
}

_fatal() {
	exitcode="$1"
	shift
	_error "$@"
	exit "$exitcode"
}

_invalid_opt() {
	_error "Invalid option: $opt"
	_echo
	unidir_usage
	exit $e_args
}

_link() {
	entry="$1"
	dst="$2"
	basename="$( basename "$entry" )"
	dstpath="$dst/$basename"

	if [ -e "$dstpath" ] && [ $OVERRIDE_SYMLINKS -ne 0 ]
	then
		if [ -L "$dstpath" ]
		then
			rm "$dstpath"
		else
			_error "$dstpath exists and is not a symlink. Skipping..."
			return
		fi
	fi

	[ -e "$dstpath" ] && return 1

	srcpath="$( realpath --relative-to "$dst" "$entry" )"

	_echo "$dstpath => $entry"
	ln -s "$srcpath" "$dstpath"
}

_merge_into() {
	src="$1"
	dst="$2"

	[ ! -d "$src" ] && _error "$src not a directory. Skipping..." && return 1
	[ "$( ls "$src" 2>/dev/null | wc -l | tr -d ' ' )" = "0" ] && return 1

	for entry in "$src/"*
	do
		_link "$entry" "$dst"
	done
}

unidir_main "$@"
